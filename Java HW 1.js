// 1.'number' + 3 + 3
/* let result = 'number' + 3 + 3;
console.log(result, typeof result);  */ /* Результат number33 (type string), тобто при конкатенації рядка з цифрами значення перетворюється в рядок
(рядок 'number' при конкатенації з числом 3 дає строку 'number3', а потім цей рядок конкатенується з наступною цифрою 3 і маємо в результаті строку
 number33 )
 */

 // 2. null + 3
/* let result = null + 3;
console.log(result, typeof result); */  /* Результат 3 (type number), тобто при використанні оператора "+" null перетворюється в число 0 і
потім використовується арифметична операція додавання, тобто  0 + 3 = 3 
 */
// 3. 5 && "qwerty"
/* let result = 5 && "qwerty";
console.log(result, typeof result);  *//* Результат qwerty (type string), оскільки у нас значенню 5 присваюється true і для рядка "qwerty" 
присваюється  true, то логічний оператор && повертає останнє значення операнда, тобто строку
 */
// 4. +'40' + +'2' + "hillel";
/* let result = +'40' + +'2' + "hillel";
console.log(result, typeof result);  */ /* Результат 42hillel (type string). Тобто при використанні унарного плюса рядки 40 та 2 перетворюются 
у числа і вони додаються один до одного; але оскільки при конкатенації числа та рядка результатом є строка, а значення "hillel" є рядком без 
унарного плюса, то і результат у нас рядок
 */

// 5.'10' - 5 === 6;
/* let result = '10' - 5 === 6;
console.log(result, typeof result);  */ /* Результат false (type boolean), оскільки рядок '10' перетворюється в число 10 і 10-5 =5, 
а потім іде порівняння отриманого числа 5 з числом 6 і тому отримуємо булевий результат false. Оператор === це оператор строгої рівності */

// 6. true + false
/* let result = true + false;
console.log(result, typeof result); */  /* Результат 1 (type number). Тобто при використанні арифметичних операторів булеві значеннями true і false
перетворюється в числа (true = 1, false = 0) , іпотім використовується арифметична операція додавання, тобто  1 + 0 = 1 
// 1.'number' + 3 + 3
/* let result = 'number' + 3 + 3;
console.log(result, typeof result);  */ /* Результат number33 (type string), тобто при конкатенації рядка з цифрами значення перетворюється в рядок
(рядок 'number' при конкатенації з числом 3 дає строку 'number3', а потім цей рядок конкатенується з наступною цифрою 3 і маємо в результаті строку
 number33 )
 */

 // 2. null + 3
/* let result = null + 3;
console.log(result, typeof result); */  /* Результат 3 (type number), тобто при використанні оператора "+" null перетворюється в число 0 і
потім використовується арифметична операція додавання, тобто  0 + 3 = 3 
 */

// 3. 5 && "qwerty"
/* let result = 5 && "qwerty";
console.log(result, typeof result);  *//* Результат qwerty (type string), оскільки у нас значенню 5 присваюється true і для рядка "qwerty" 
присваюється  true, то логічний оператор && повертає останнє значення операнда, тобто строку
 */

// 4. +'40' + +'2' + "hillel";
/* let result = +'40' + +'2' + "hillel";
console.log(result, typeof result);  */ /* Результат 42hillel (type string). Тобто при використанні унарного плюса рядки 40 та 2 перетворюются 
у числа і вони додаються один до одного; але оскільки при конкатенації числа та рядка результатом є строка, а значення "hillel" є рядком без 
унарного плюса, то і результат у нас рядок
 */

// 5.'10' - 5 === 6;
/* let result = '10' - 5 === 6;
console.log(result, typeof result);  */ /* Результат false (type boolean), оскільки рядок '10' перетворюється в число 10 і 10-5 =5, 
а потім іде порівняння отриманого числа 5 з числом 6 і тому отримуємо булевий результат false. Оператор === це оператор строгої рівності */

// 6. true + false
/* let result = true + false;
console.log(result, typeof result); */  /* Результат 1 (type number). Тобто при використанні арифметичних операторів булеві значеннями true і false
перетворюється в числа (true = 1, false = 0) , іпотім використовується арифметична операція додавання, тобто  1 + 0 = 1 
 */

// 7. '4px' - 3
/* let result = '4px' - 3
console.log(result, typeof result); */ /* Результат NaN (type number). Тобто JavaScript намагається перетворити рядок '4px' у число, 
а це не є можливим оскільки рядок містить окрім числа ще й букви і тому отримуємо NaN, а далі іде віднімання 3 від NaN і також отримуємо NaN  */

// 8. '4' - 3
/* let result = '4' - 3
console.log(result, typeof result); */ /* Результат 1 (type number), оскільки при використанні оператора "-" рядок перетворюється в число і 
далі виконується проста операція віднімання */

// 9. '6' + 3 ** 0;
/* let result = '6' + 3 ** 0;
console.log(result, typeof result); *//*  Результат 61 (type string ), тобто першочергово виконується операція піднесення 3 у ступінь 0 і маємо 1,
 а потім при конкатенації рядка з числом отримуємо рядок
 */

// 10. 12 / '6'
/* let result = 12 / '6'
console.log(result, typeof result); *//*  Результат 2 (type number), тобто рядок 6 перетворюється в число і далі виконується операція ділення*/

// 11. '10' + (5 === 6);
/* let result = '10' + (5 === 6);
console.log(result, typeof result); */ /* Результат 10false (type string ). Спочатку порівнюється значення в дужках і отримуємо false, а при 
конкатенації рядка і булевого значення '10' + false отримуємо рядок */

// 12. null == ''
/* let result = null == ''
console.log(result, typeof result); */ /* Результат false (type boolean ). Для нестрогого оператора рівності == null діє особливе правило: 
це значення не перетворюється ні на що тому null не дорівнює рядку*/

// 13. 3 ** (9 / 3);
/* let result = 3 ** (9 / 3);
console.log(result, typeof result); */ /* Результат 27 (type number). В першу чергу виконується опереція в дужках, а потім отриманий результат 
підноситься до ступінь 3 */

// 14. !!'false' == !!'true'
/* let result = !!'false' == !!'true'
console.log(result, typeof result);  */ /* Результат true (type boolean), оскільки логічний оператор ! перетворює кожен операнд на протилежне значення
тобто пустий рядок,а потім ще раз на заповнений рядок, тому вони обидва будуть дорівнювати один одному і результат true*/

// 15. 0 || '0' && 1
/* let result = 0 || '0' && 1
console.log(result, typeof result);  *//* Результат 1 (type number). Перша операція виконується  0 || '0' і ми отримуємо true, оскільки для 
логічного оператора || потрібно, щоб хочаб один операнд мав значення true, а в нас 0 це false, а '0' true, тому маємо значення true. Потім виконується
операція '0' && 1 і обидва значення мають true, тому результатом виводиться останнє значення , а це цифра 1 */

// 16. (+null == false) < 1;
/* let result = (+null == false) < 1;
console.log(result, typeof result); */ /* Результат false (type boolean ) оскільки спочатку порівнюються значення в дужках, тобто унарний плюс 
перед null перетворює його на число 0, при порівнянні числа з булевим значенням false перетворюється в 0, тому в дужках буде (0==0), а це true. 
Потім при використанні оператора менше і порівнянні true з 1,  true перетворюється на 1 і врешті значення буде 1 < 1, що є не вірним. */

// 17. false && true || true
/* let result = false && true || true
console.log(result, typeof result);  */  /* Результат true (type boolean ). Спочатку перевіряється операція false && true і у нас виходить false,
для логічного оператора && необхідно, щоб обидва операнди були однаковими. Потім перевірється операція false || true і оскільки для логічного 
оператора || необхідно, щоб хочаб один операнд мав значення true, тому результат true */

// 18. false && (false || true);
/* let result = false && (false || true);
console.log(result, typeof result); */ /* Результат false (type boolean ). Спочатку перевіряється операція в дужках і виходить true, 
бо для логічного оператора || необхідно, щоб хочаб один операнд мав значення true. Потім виконується операція false && true, а для логічного 
оператора && необхідно, щоб обидва операнди були однаковими.  */

// 19. (+null == false) < 1 ** 5;
/* let result = (+null == false) < 1 ** 5;
console.log(result, typeof result); */ /* Результат false (type boolean ) оскільки спочатку порівнюються значення в дужках, тобто унарний плюс 
перед null перетворює його на число 0, при порівнянні числа з булевим значенням false перетворюється в 0, тому в дужках буде (0==0), а це true. 
Потім іде піднесення 1 у 5 ступінь, а це буде 1. І останнє при використанні оператора менше і порівнянні true з 1,  
true перетворюється на 1 і врешті значення буде 1 < 1, що є не вірним */







